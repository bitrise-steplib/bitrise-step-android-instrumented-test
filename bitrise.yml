format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  check:
    steps:
    - git::https://github.com/bitrise-steplib/steps-check.git: { }

  e2e:
    steps:
    - git::https://github.com/bitrise-steplib/steps-check.git:
        inputs:
        - workflow: e2e

  generate_readme:
    steps:
    - git::https://github.com/bitrise-steplib/steps-readme-generator.git@main: { }

  sample:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/Bitrise-Android-Modules-Sample.git
    - TEST_APP_BRANCH: main
    - TEST_APP_MODULE: app
    - TEST_APP_VARIANT: debug
    steps:
    - script:
        inputs:
        - content: |
            #!/bin/env bash
            set -euo pipefail
            rm -rf "./_tmp"
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone:
        inputs:
        - repository_url: $TEST_APP_URL
        - branch: $TEST_APP_BRANCH
        - clone_into_dir: ./_tmp
    - install-missing-android-tools:
        run_if: .IsCI
        inputs:
        - gradlew_path: ./_tmp/gradlew
    - android-build-for-ui-testing:
        inputs:
        - project_location: ./_tmp
        - module: $TEST_APP_MODULE
        - variant: $TEST_APP_VARIANT
    - avd-manager: { }
    # If you need to run this on an Apple Silicon device during development, uncomment the lines below, and comment out the line above.
#    - avd-manager:
#        inputs:
#        - abi: arm64-v8a
    - wait-for-android-emulator: { }
    - path::./:
        title: Step Test
    - script:
        is_always_run: true
        summary: Cleanup local environment
        description: Kills the emulator created by AVD manager, and deletes temporary files
        inputs:
        - content: |
            #!/bin/env bash
            set -euo pipefail
            adb -s $BITRISE_EMULATOR_SERIAL emu kill
            rm -rf ./_tmp
            rm -rf "$BITRISE_DEPLOY_DIR/app-debug.apk"
            rm -rf "$BITRISE_DEPLOY_DIR/app-debug-androidTest.apk"

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
    # if you want to share this step into a StepLib
    - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
    - BITRISE_STEP_ID: $BITRISE_STEP_ID
    - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION
    - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c "${MY_STEPLIB_REPO_FORK_GIT_URL}"
            bitrise share create --stepid "${BITRISE_STEP_ID}" --tag "${BITRISE_STEP_VERSION}" --git "${BITRISE_STEP_GIT_CLONE_URL}"
            bitrise share finish
